infix_identifier = [^a-zA-Z0-9()[]{}"]+ # TODO infix regular identifiers
type_identifier = [a-zA-Z][0-9a-zA-Z]*
identifier = [a-zA-Z][0-9a-zA-Z]*|\( <infix_identifier> \)
number = [0-9]+
octal = [0-7]
decimal = [0-9]
hexadecimal = [0-9a-zA-z]
escaped = \\(\\ | \" | n | r | f | a | b | t | v | 0 | (<octal> <octal> <octal>) | (x <hexadecimal> <hexadecimal>) |  (u <hexadecimal> <hexadecimal> <hexadecimal> <hexadecimal>) | (U <hexadecimal> <hexadecimal> <hexadecimal> <hexadecimal> <hexadecimal> <hexadecimal> <hexadecimal> <hexadecimal>))
string+ = ([^"]|escaped)+
string* = <string+>?
float = ([0-9]+.[0-9]*)|([0-9]*.[0-9]+)
comment = (#[^#]*#)|(--[^\n"]*(\n|eof|")) # single line comment can end with newline or quote (the quote should not be absorbed)

type =
    |var (<type_identifier>)
    |unit (\(\))
    |paren (\(<type>\))
    |string (string)
    |integer (integer)
    |float (float)
    |function (<type> -> <type>)
    |variant (((\|)?<type_identifier> <type>)(\|<type_identifier> <type>)+) # TODO variant extension syntax sugar (use [])
    |record ({(<identifier>: <type>)(,<identifier>: <type>)*,?}) # TODO record extension syntax sugar (use [])
    |row ([]|[<type_identifier>: <type>; <type>] # we use [] do denote row types
    |forall (âˆ€(<type_identifier>,)+.<type>)
    |tuple (\(<type> (,<type)+\))
pattern =
    |var (<identifier>)
    |string (\"string\")
    |number (<number>)
    |float (<float>)
    |tuple (\(<pattern> (,<pattern)+,?\))
    |record ({(<identifier>|(<identifier> = <pattern>)),*}) # TODO maybe a rest row or ... pattern
    |unit (\(\))
    |wildcard (\_)
    |paren (\(<pattern>\))
    |constructor (<identifier> <pattern>)
    |ascription (<pattern>: <type>)
expr =
    |fun (fun <pattern>+ -> <expr>)
    |let (let rec? <pattern> = <expr> in <expr>)
    |app (<expr> <expr>+)
    |infix_app (<expr> <infix_identifier> <expr>)
    |if (if <expr> then <expr> else <expr>)
    |var (<identifier>)
    |string (\"string\")
    |number (<number>)
    |float (<float>)
    |tuple (\(<expr> (,<expr)+\))
    |record ({(<identifier>|(<identifier> = <expr>)),*}) # TODO record extension syntax sugar
    |unit (\(\))
    |paren (\(<expr>\))
    |tuple_access (<expr>.<number>)
    |record_access (<expr>.<identifier>)
    |constructor (<identifier> <expr>)
    |match (match <expr> with ((\|<pattern>)+ -> <expr>)+) # TODO allow first matcher to not need |
    |ascription (<expr>: <type>)
finish_expr =
    |fun (fun <pattern>+ -> <finish_expr>)
    |let (let rec? <pattern> = <expr> in <finish_expr>)
    |app (<expr> <expr>* <finish_expr>) # does not show when to stop i.e. "f x y\nfoo bar baz" does the application go to baz?, what about with strings, or (top level?) lets
    |infix_app (<expr> <infix_identifier> <finish_expr>)
    |string (\"string)
    |if (if <expr> then <expr> else <finish_expr>)
    |var (<identifier>\")
    |number (<number>\")
    |float (<float>\")
    |tuple (\(<expr> (,<expr)+\)\")
    |record ({(<identifier>|(<identifier> = <expr>)),*}\") # TODO record extension syntax sugar
    |unit (\(\)\")
    |paren (\(<expr>\)\")
    |tuple_access (<expr>.<number>\")
    |record_access (<expr>.<identifier>\")
    |constructor (<identifier> <expr>\")
    |match (match <expr> with ((\|<pattern>)+ -> <expr>)*(\|<pattern>)+ -> <finish_expr>) # TODO allow first matcher to not need |
    |ascription (<expr>: <type>\")
program_element =
    |expr (\"<finish_expr>)
    |declaration (\"let rec? <identifier> = <finish_expr>)
    |string (<string>)
    |type_declaration (\"type <type_identifier> = <type>\")
program = <program_element>*
